[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "testgen-copilot-assistant"
dynamic = ["version"]
description = "CLI tool and VS Code extension for AI-powered test generation and security analysis"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Terragon Labs", email = "info@terragonlabs.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Testing",
    "Topic :: Security",
]
keywords = ["testing", "security", "ai", "quantum", "automation", "cli"]
requires-python = ">=3.8"

dependencies = [
    "click>=8.0.0",
    "requests>=2.25.0",
    "jinja2>=3.0.0",
    "pyyaml>=6.0",
    "rich>=12.0.0",
    "typer>=0.9.0",
    "numpy>=1.21.0",
    "psutil>=5.8.0",
]

[project.optional-dependencies]
ai = [
    "openai>=1.0.0",
    "anthropic>=0.18.0",
    "tiktoken>=0.4.0",
]

security = [
    "bandit>=1.7.0",
    "safety>=2.0.0",
    "cryptography>=3.4.0",
]

dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]

api = [
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.20.0",
    "pydantic>=2.0.0",
    "python-multipart>=0.0.6",
]

monitoring = [
    "prometheus-client>=0.15.0",
    "grafana-api>=1.0.0",
    "opentelemetry-api>=1.15.0",
    "opentelemetry-sdk>=1.15.0",
]

database = [
    "sqlalchemy>=2.0.0",
    "alembic>=1.8.0",
    "psycopg2-binary>=2.9.0",
    "aiosqlite>=0.19.0",
]

all = [
    "testgen-copilot-assistant[ai,security,dev,api,monitoring,database]",
]

[project.scripts]
testgen = "testgen_copilot.cli:main"
testgen-copilot = "testgen_copilot.cli:main"
quantum-planner = "testgen_copilot.quantum_cli:quantum"

[project.urls]
Homepage = "https://github.com/terragonlabs/quantum-inspired-task-planner"
Documentation = "https://docs.terragonlabs.com/testgen-copilot"
Repository = "https://github.com/terragonlabs/quantum-inspired-task-planner"
Issues = "https://github.com/terragonlabs/quantum-inspired-task-planner/issues"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.dynamic]
version = {attr = "testgen_copilot.version.__version__"}

[tool.black]
line-length = 100
target-version = ["py38", "py39", "py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 100
target-version = "py38"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"tests/*" = ["B011"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "e2e: End-to-end tests",
    "security: Security tests",
    "performance: Performance tests",
    "quantum: Quantum algorithm tests",
]

[tool.coverage.run]
source = ["src/testgen_copilot"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__main__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]