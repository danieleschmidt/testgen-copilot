[build-system]
requires = ["setuptools>=61", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "testgen_copilot"
version = "0.1.0"
requires-python = ">=3.8"
description = "CLI tool and VS Code extension that uses LLMs to automatically generate comprehensive unit tests and highlight potential security vulnerabilities"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "TestGen Team", email = "team@testgen.dev"}
]
keywords = ["testing", "security", "ai", "code-generation", "llm"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Testing",
    "Topic :: Security",
]

dependencies = [
    "click>=8.0.0",
    "pyyaml>=6.0",
    "jinja2>=3.0.0",
    "rich>=13.0.0",
    "watchdog>=3.0.0",
    "gitpython>=3.1.0",
    "requests>=2.28.0",
    "aiohttp>=3.8.0",
    "typing-extensions>=4.0.0",
    "pydantic>=2.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "pytest-mock>=3.10.0",
    "pytest-benchmark>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "bandit[toml]>=1.7.5",
    "safety>=2.3.0",
    "pre-commit>=3.3.0",
    "coverage[toml]>=7.0.0",
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "build>=0.10.0",
]

ai = [
    "openai>=1.0.0",
    "anthropic>=0.25.0",
    "tiktoken>=0.5.0",
]

all = ["testgen_copilot[dev,ai]"]

[project.urls]
Homepage = "https://github.com/testgen-team/testgen-copilot-assistant"
Documentation = "https://testgen-copilot-assistant.readthedocs.io"
Repository = "https://github.com/testgen-team/testgen-copilot-assistant"
Issues = "https://github.com/testgen-team/testgen-copilot-assistant/issues"
Changelog = "https://github.com/testgen-team/testgen-copilot-assistant/blob/main/CHANGELOG.md"

[project.scripts]
testgen = "testgen_copilot.cli:main"

[tool.setuptools]
package-dir = {"" = "src"}
zip-safe = false

[tool.setuptools.packages.find]
where = ["src"]
include = ["testgen_copilot*"]

[tool.setuptools.package-data]
testgen_copilot = [
    "templates/*.j2",
    "rules/*.yml",
    "schemas/*.json",
]

# ===============================================
# Black Configuration
# ===============================================
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
)/
'''

# ===============================================
# isort Configuration
# ===============================================
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["testgen_copilot"]
known_third_party = ["pytest", "click", "yaml", "jinja2", "rich", "watchdog"]

# ===============================================
# Ruff Configuration
# ===============================================
[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings  
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "C90", # mccabe
    "T20", # flake8-print
    "DJ",  # flake8-django
    "RUF", # Ruff-specific rules
    "TCH", # flake8-type-checking
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.flake8-type-checking]
strict = true

# ===============================================
# MyPy Configuration
# ===============================================
[tool.mypy]
python_version = "3.8"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
show_error_context = true
pretty = true

[[tool.mypy.overrides]]
module = [
    "yaml.*",
    "watchdog.*",
    "git.*",
    "requests.*",
    "aiohttp.*",
]
ignore_missing_imports = true

# ===============================================
# Pytest Configuration
# ===============================================
[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=src/testgen_copilot",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-fail-under=80",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "performance: Performance tests",
    "security: Security tests",
    "slow: Slow running tests",
    "benchmark: Benchmark tests",
    "e2e: End-to-end tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# ===============================================
# Coverage Configuration
# ===============================================
[tool.coverage.run]
source = ["src/testgen_copilot"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__main__.py",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

# ===============================================
# Bandit Configuration
# ===============================================
[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
tests = ["B201", "B301", "B401", "B501", "B601", "B602", "B603", "B604", "B605", "B606", "B607", "B608", "B609"]
skips = ["B101", "B601"]

[tool.bandit.assert_used]
skips = ["*_test.py", "*/test_*.py"]
