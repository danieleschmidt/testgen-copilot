[build-system]
requires = ["setuptools>=61"]
build-backend = "setuptools.build_meta"

[project]
name = "testgen_copilot"
version = "0.0.1"
requires-python = ">=3.8"
description = "CLI tool and VS Code extension that uses LLMs to automatically generate comprehensive unit tests and highlight potential security vulnerabilities"
authors = [
    {name = "TestGen Team", email = "team@testgen.dev"}
]
readme = "README.md"
license = {text = "MIT"}
keywords = ["testing", "security", "ai", "llm", "automation", "cli"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Testing",
    "Topic :: Security",
    "Topic :: Software Development :: Code Generators"
]
dependencies = [
    "click>=8.0.0",
    "rich>=13.0.0",
    "pydantic>=2.0.0",
    "httpx>=0.24.0",
    "python-dotenv>=1.0.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "pytest-mock>=3.10.0",
    "hypothesis>=6.0.0",
    "ruff>=0.1.0",
    "black>=23.0.0",
    "bandit>=1.7.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "twine>=4.0.0",
    "build>=0.10.0"
]
ai = [
    "openai>=1.0.0",
    "anthropic>=0.7.0",
    "tiktoken>=0.5.0"
]
all = [
    "testgen_copilot[dev,ai]"
]

[project.urls]
Homepage = "https://github.com/testgen/copilot-assistant"
Documentation = "https://testgen.readthedocs.io"
Repository = "https://github.com/testgen/copilot-assistant"
Issues = "https://github.com/testgen/copilot-assistant/issues"
Changelog = "https://github.com/testgen/copilot-assistant/blob/main/CHANGELOG.md"

[project.scripts]
testgen = "testgen_copilot.cli:main"
testgen-autonomous = "testgen_copilot.autonomous_manager:main"
testgen-metrics = "testgen_copilot.metrics_collector:main"

[tool.setuptools]
package-dir = {"" = "src"}
packages = ["testgen_copilot"]

# =============================================================================
# Development Tools Configuration
# =============================================================================

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_functions = ["test_*"]
python_classes = ["Test*"]
addopts = [
    "--cov=src/testgen_copilot",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--cov-report=html",
    "--cov-fail-under=85",
    "--strict-markers",
    "--strict-config",
    "-v",
    "--tb=short",
    "-ra"
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "security: Security tests", 
    "performance: Performance tests",
    "slow: Slow tests (skipped by default)"
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning"
]

[tool.coverage.run]
source = ["src/testgen_copilot"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/__pycache__/*",
    "*/setup.py",
    "*/.tox/*"
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]
show_missing = true
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"

[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "S",   # bandit
    "N",   # pep8-naming
]
ignore = [
    "E501",   # line too long, handled by black
    "B008",   # do not perform function calls in argument defaults
    "C901",   # too complex
    "S101",   # use of assert
    "S603",   # subprocess call without shell=True
    "S607",   # starting process with partial executable path
]
unfixable = [
    "B",  # Don't touch bugbear violations
]

[tool.ruff.per-file-ignores]
"tests/**/*" = ["S101", "ARG", "SIM"]
"scripts/**/*" = ["S"]

[tool.ruff.isort]
known-first-party = ["testgen_copilot"]
force-single-line = true

[tool.black]
target-version = ['py38']
line-length = 88
skip-string-normalization = true
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
pretty = true

[[tool.mypy.overrides]]
module = [
    "tests.*"
]
disallow_untyped_defs = false
disallow_incomplete_defs = false

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101", "B601"]

[tool.semantic_release]
version_toml = ["pyproject.toml:project.version"]
version_variables = ["src/testgen_copilot/version.py:__version__"]
build_command = "python -m build"
commit_subject = "chore(release): bump version to {version}"
commit_message = "chore(release): bump version to {version}\n\nðŸš€ Generated with [Claude Code](https://claude.ai/code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>"
tag_format = "v{version}"
upload_to_vcs_release = true