# Promtail Configuration for TestGen-Copilot
# Log shipping to Loki for centralized log aggregation

server:
  http_listen_port: 9080
  grpc_listen_port: 0

positions:
  filename: /tmp/positions.yaml

clients:
  - url: http://loki:3100/loki/api/v1/push

scrape_configs:
  # TestGen application logs
  - job_name: testgen-app
    static_configs:
      - targets:
          - localhost
        labels:
          job: testgen-app
          service: testgen-copilot
          environment: "${TESTGEN_ENV:-development}"
          __path__: /app/logs/*.log

    pipeline_stages:
      # Parse JSON logs
      - json:
          expressions:
            level: level
            timestamp: timestamp
            message: message
            component: component
            user_id: user_id
            request_id: request_id
            file_path: file_path
            language: language
            duration: duration
            error_type: error_type

      # Set timestamp
      - timestamp:
          source: timestamp
          format: RFC3339

      # Set log level
      - labels:
          level:
          component:
          service:
          environment:

      # Drop debug logs in production
      - drop:
          expression: '.*'
          older_than: 24h
          source: level
          value: DEBUG

  # System logs
  - job_name: system-logs
    static_configs:
      - targets:
          - localhost
        labels:
          job: system
          service: system
          __path__: /var/log/*.log

    pipeline_stages:
      - regex:
          expression: '^(?P<timestamp>\S+\s+\S+\s+\S+)\s+(?P<hostname>\S+)\s+(?P<service>\S+):\s+(?P<message>.*)'
      
      - timestamp:
          source: timestamp
          format: 'Jan 02 15:04:05'

      - labels:
          hostname:
          service:

  # Docker container logs
  - job_name: docker-logs
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 5s

    relabel_configs:
      - source_labels: ['__meta_docker_container_name']
        regex: '/testgen-(.*)'
        target_label: container
      
      - source_labels: ['__meta_docker_container_label_com_docker_compose_service']
        target_label: compose_service

      - source_labels: ['__meta_docker_container_label_com_docker_compose_project']
        target_label: compose_project

    pipeline_stages:
      # Parse container logs
      - json:
          expressions:
            time: time
            level: level
            msg: msg
            stream: stream

      - timestamp:
          source: time
          format: RFC3339Nano

      - labels:
          level:
          stream:
          container:
          compose_service:

  # Nginx access logs
  - job_name: nginx-access
    static_configs:
      - targets:
          - localhost
        labels:
          job: nginx-access
          service: nginx
          __path__: /var/log/nginx/access.log

    pipeline_stages:
      - regex:
          expression: '^(?P<remote_addr>\S+)\s+-\s+(?P<remote_user>\S+)\s+\[(?P<time_local>[^\]]+)\]\s+"(?P<method>\S+)\s+(?P<path>\S+)\s+(?P<protocol>\S+)"\s+(?P<status>\d+)\s+(?P<body_bytes_sent>\d+)\s+"(?P<http_referer>[^"]*)"\s+"(?P<http_user_agent>[^"]*)"'

      - timestamp:
          source: time_local
          format: '02/Jan/2006:15:04:05 -0700'

      - labels:
          method:
          status:
          path:

      # Parse response time if available
      - regex:
          expression: '.*request_time=(?P<request_time>\d+\.\d+)'
          source: path

  # Quantum planner specific logs
  - job_name: quantum-planner
    static_configs:
      - targets:
          - localhost
        labels:
          job: quantum-planner
          service: quantum-api
          component: quantum
          __path__: /app/logs/quantum*.log

    pipeline_stages:
      - json:
          expressions:
            level: level
            timestamp: timestamp
            message: message
            task_id: task_id
            quantum_state: quantum_state
            entanglement_level: entanglement_level
            annealing_iteration: annealing_iteration
            optimization_score: optimization_score

      - timestamp:
          source: timestamp
          format: RFC3339

      - labels:
          level:
          quantum_state:
          component:

  # Security logs
  - job_name: security-logs
    static_configs:
      - targets:
          - localhost
        labels:
          job: security
          service: testgen-security
          __path__: /app/logs/security*.log

    pipeline_stages:
      - json:
          expressions:
            level: level
            timestamp: timestamp
            message: message
            security_event: security_event
            user_id: user_id
            ip_address: ip_address
            severity: severity
            rule_id: rule_id

      - timestamp:
          source: timestamp
          format: RFC3339

      - labels:
          level:
          security_event:
          severity:

      # Alert on critical security events
      - match:
          selector: '{severity="critical"}'
          stages:
            - template:
                source: alert
                template: 'ðŸš¨ Critical Security Event: {{ .message }}'

  # Performance logs
  - job_name: performance-logs
    static_configs:
      - targets:
          - localhost
        labels:
          job: performance
          service: testgen-performance
          __path__: /app/logs/performance*.log

    pipeline_stages:
      - json:
          expressions:
            timestamp: timestamp
            operation: operation
            duration_ms: duration_ms
            memory_mb: memory_mb
            cpu_percent: cpu_percent
            file_size_kb: file_size_kb
            test_count: test_count

      - timestamp:
          source: timestamp
          format: RFC3339

      - labels:
          operation:

      # Convert metrics to numeric values
      - template:
          source: duration_seconds
          template: '{{ div .duration_ms 1000 }}'

  # Error logs (high priority)
  - job_name: error-logs
    static_configs:
      - targets:
          - localhost
        labels:
          job: errors
          service: testgen-errors
          priority: high
          __path__: /app/logs/error*.log

    pipeline_stages:
      - json:
          expressions:
            level: level
            timestamp: timestamp
            message: message
            error_type: error_type
            stack_trace: stack_trace
            user_id: user_id
            request_id: request_id
            component: component

      - timestamp:
          source: timestamp
          format: RFC3339

      - labels:
          level:
          error_type:
          component:
          priority:

      # Extract error categories
      - regex:
          expression: '(?P<error_category>TimeoutError|ValidationError|APIError|DatabaseError)'
          source: error_type

      - labels:
          error_category: