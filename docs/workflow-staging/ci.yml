# Comprehensive CI/CD Pipeline for TestGen Copilot Assistant
# Provides multi-stage testing, security scanning, and quality gates

name: Comprehensive CI/CD

on:
  push:
    branches: [main, develop]
    tags: ['v*']
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security scan daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ==========================================================================
  # Code Quality and Linting
  # ==========================================================================
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run pre-commit hooks
        uses: pre-commit/action@v3.0.0

      - name: Lint with Ruff
        run: |
          ruff check . --output-format=github
          ruff format --check .

      - name: Type check with MyPy
        run: mypy src/testgen_copilot

      - name: Check documentation
        run: |
          python -m pydocstyle src/testgen_copilot --convention=google

  # ==========================================================================
  # Security Scanning
  # ==========================================================================
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit[toml] safety semgrep

      - name: Run Bandit security scan
        run: |
          bandit -r src/ -f json -o bandit-report.json
          bandit -r src/ -f txt

      - name: Run Safety check
        run: safety check --json --output safety-report.json

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/python

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # ==========================================================================
  # Testing Matrix
  # ==========================================================================
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        exclude:
          # Reduce matrix size by excluding some combinations
          - os: windows-latest
            python-version: '3.8'
          - os: macos-latest
            python-version: '3.8'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run unit tests
        run: pytest tests/unit/ -v --junit-xml=junit-unit.xml

      - name: Run integration tests
        run: pytest tests/integration/ -v --junit-xml=junit-integration.xml

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
          path: junit-*.xml

  # ==========================================================================
  # Coverage Analysis
  # ==========================================================================
  coverage:
    name: Coverage Analysis
    runs-on: ubuntu-latest
    needs: [quality]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run tests with coverage
        run: |
          pytest --cov=src/testgen_copilot \
                 --cov-report=xml \
                 --cov-report=html \
                 --cov-report=term-missing \
                 --cov-fail-under=85

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports
          path: |
            coverage.xml
            htmlcov/

  # ==========================================================================
  # Performance Testing
  # ==========================================================================
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]" pytest-benchmark

      - name: Run performance tests
        run: pytest tests/performance/ --benchmark-json=benchmark.json

      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: benchmark.json

  # ==========================================================================
  # Build and Package
  # ==========================================================================
  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [quality, security, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: python -m build

      - name: Check package
        run: twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-packages
          path: dist/

  # ==========================================================================
  # Docker Build and Security Scan
  # ==========================================================================
  docker:
    name: Docker Build & Scan
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: testgen-copilot:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VERSION=${{ github.ref_name }}
            VCS_REF=${{ github.sha }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'testgen-copilot:test'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # ==========================================================================
  # SBOM Generation
  # ==========================================================================
  sbom:
    name: Generate SBOM
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install cyclonedx-bom pip-audit

      - name: Generate Python SBOM
        run: |
          pip install -e .
          cyclonedx-py -o sbom.json

      - name: Run pip-audit
        run: pip-audit --format=json --output=audit-report.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom-reports
          path: |
            sbom.json
            audit-report.json

  # ==========================================================================
  # End-to-End Tests
  # ==========================================================================
  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [docker]
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run E2E tests
        run: pytest tests/e2e/ -v --junit-xml=junit-e2e.xml
        env:
          REDIS_URL: redis://localhost:6379

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results
          path: junit-e2e.xml

  # ==========================================================================
  # Release Pipeline
  # ==========================================================================
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [quality, security, test, coverage, performance, build, docker, sbom, e2e]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist-packages
          path: dist/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          generate_release_notes: true
          append_body: |
            
            🚀 Generated with [Claude Code](https://claude.ai/code)
            
            Co-Authored-By: Claude <noreply@anthropic.com>

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}

  # ==========================================================================
  # Deployment to Staging
  # ==========================================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [release]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: staging
    steps:
      - name: Deploy to staging
        run: |
          echo "Deployment to staging would happen here"
          echo "This could include:"
          echo "- Deploying to staging environment"
          echo "- Running smoke tests"
          echo "- Notifying team channels"

  # ==========================================================================
  # Notification and Reporting
  # ==========================================================================
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [quality, security, test, coverage, performance, build, docker, sbom, e2e]
    if: always()
    steps:
      - name: Notify on Success
        if: ${{ needs.quality.result == 'success' && needs.security.result == 'success' && needs.test.result == 'success' }}
        run: |
          echo "✅ All CI checks passed successfully!"

      - name: Notify on Failure
        if: ${{ needs.quality.result == 'failure' || needs.security.result == 'failure' || needs.test.result == 'failure' }}
        run: |
          echo "❌ Some CI checks failed. Please review the logs."
          exit 1