# Advanced Security Audit Pipeline
# Comprehensive security scanning and vulnerability assessment

name: Security Audit

on:
  schedule:
    # Weekly comprehensive security audit
    - cron: '0 3 * * 1'
  workflow_dispatch:
  push:
    branches: [main]
    paths:
      - 'src/**'
      - 'requirements*.txt'
      - 'pyproject.toml'
      - '.github/workflows/**'

jobs:
  # ==========================================================================
  # Comprehensive Dependency Audit
  # ==========================================================================
  dependency-audit:
    name: Dependency Security Audit
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install audit tools
        run: |
          python -m pip install --upgrade pip
          pip install pip-audit safety cyclonedx-bom osv-scanner

      - name: Run pip-audit
        run: |
          pip install -e .
          pip-audit --format=json --output=pip-audit-report.json
          pip-audit --format=cyclonedx-json --output=pip-audit-cyclonedx.json

      - name: Run Safety check
        run: |
          safety check --json --output=safety-report.json

      - name: Generate SBOM
        run: |
          cyclonedx-py -o software-bill-of-materials.json

      - name: Run OSV-Scanner
        run: |
          osv-scanner scan --lockfile=requirements.txt --format=json --output=osv-report.json

      - name: Upload security artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dependency-audit-reports
          path: |
            pip-audit-report.json
            pip-audit-cyclonedx.json
            safety-report.json
            software-bill-of-materials.json
            osv-report.json

  # ==========================================================================
  # License Compliance Check
  # ==========================================================================
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install license tools
        run: |
          python -m pip install --upgrade pip
          pip install pip-licenses licensecheck

      - name: Check Python licenses
        run: |
          pip install -e .
          pip-licenses --format=json --output-file=python-licenses.json
          pip-licenses --format=html --output-file=python-licenses.html

      - name: Run license compatibility check
        run: |
          licensecheck --zero --json > license-check.json

      - name: Upload license reports
        uses: actions/upload-artifact@v3
        with:
          name: license-reports
          path: |
            python-licenses.json
            python-licenses.html
            license-check.json

  # ==========================================================================
  # Advanced SAST Analysis
  # ==========================================================================
  advanced-sast:
    name: Advanced Static Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install SAST tools
        run: |
          python -m pip install --upgrade pip
          pip install semgrep bandit[toml] dlint vulture pyflakes

      - name: Run comprehensive Semgrep scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/python
            p/owasp-top-ten
            p/cwe-top-25
            p/pii
            r/python.lang.security

      - name: Run Bandit with comprehensive rules
        run: |
          bandit -r src/ -f json -o bandit-comprehensive.json
          bandit -r src/ -f sarif -o bandit-results.sarif

      - name: Run dlint (Django linter)
        run: |
          dlint src/ --print-dlint-version --json > dlint-report.json

      - name: Check for dead code
        run: |
          vulture src/ --json > vulture-dead-code.json

      - name: Upload SARIF results to GitHub
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: bandit-results.sarif

      - name: Upload SAST reports
        uses: actions/upload-artifact@v3
        with:
          name: sast-reports
          path: |
            bandit-comprehensive.json
            bandit-results.sarif
            dlint-report.json
            vulture-dead-code.json

  # ==========================================================================
  # Secrets Scanning
  # ==========================================================================
  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Run detect-secrets
        run: |
          pip install detect-secrets
          detect-secrets scan --all-files --baseline .secrets.baseline || true
          detect-secrets audit .secrets.baseline

  # ==========================================================================
  # Container Security Analysis
  # ==========================================================================
  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: testgen-copilot:security-scan
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy comprehensive scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'testgen-copilot:security-scan'
          format: 'json'
          output: 'trivy-comprehensive.json'

      - name: Run Grype vulnerability scanner
        uses: anchore/scan-action@v3
        with:
          image: 'testgen-copilot:security-scan'
          output-format: json
          output-file: grype-report.json

      - name: Upload container security reports
        uses: actions/upload-artifact@v3
        with:
          name: container-security-reports
          path: |
            trivy-comprehensive.json
            grype-report.json

  # ==========================================================================
  # Infrastructure as Code Security
  # ==========================================================================
  iac-security:
    name: IaC Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          output_format: json
          output_file_path: checkov-report.json

      - name: Run KICS
        uses: checkmarx/kics-github-action@master
        with:
          path: .
          output_path: kics-results/
          output_formats: json,sarif

      - name: Upload IaC security reports
        uses: actions/upload-artifact@v3
        with:
          name: iac-security-reports
          path: |
            checkov-report.json
            kics-results/

  # ==========================================================================
  # Security Report Generation
  # ==========================================================================
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-audit, license-check, advanced-sast, secrets-scan, container-security, iac-security]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all security artifacts
        uses: actions/download-artifact@v3

      - name: Generate comprehensive security report
        run: |
          echo "# Security Audit Report - $(date)" > security-report.md
          echo "" >> security-report.md
          echo "## Summary" >> security-report.md
          echo "Comprehensive security audit completed for TestGen Copilot Assistant" >> security-report.md
          echo "" >> security-report.md
          
          echo "## Audit Components" >> security-report.md
          echo "- ✅ Dependency vulnerability assessment" >> security-report.md
          echo "- ✅ License compliance verification" >> security-report.md
          echo "- ✅ Advanced static analysis security testing (SAST)" >> security-report.md
          echo "- ✅ Secrets detection and scanning" >> security-report.md
          echo "- ✅ Container security analysis" >> security-report.md
          echo "- ✅ Infrastructure as Code security scanning" >> security-report.md
          echo "" >> security-report.md
          
          echo "## Generated Reports" >> security-report.md
          find . -name "*.json" -o -name "*.html" -o -name "*.sarif" | sort >> security-report.md

      - name: Upload consolidated security report
        uses: actions/upload-artifact@v3
        with:
          name: consolidated-security-report
          path: security-report.md

      - name: Comment PR with security summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '## 🔒 Security Audit Summary\n\n' + report
            });