# Comprehensive CI/CD Pipeline for TestGen-Copilot
# This workflow provides enterprise-grade CI/CD with security, quality gates, and deployment

name: üöÄ Comprehensive CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly builds at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      skip_tests:
        description: 'Skip test execution'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"
  TESTGEN_ENV: ci
  FORCE_COLOR: "1"
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  PIP_NO_CACHE_DIR: "1"
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # ============================================================================
  # SECURITY AND COMPLIANCE SCANNING
  # ============================================================================
  security-scan:
    name: üîí Security & Compliance Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-security-${{ hashFiles('**/pyproject.toml') }}
      
      - name: Install security tools
        run: |
          pip install bandit[toml] safety semgrep checkov
      
      - name: Run Bandit SAST scan
        run: |
          bandit -r src/ -f json -o bandit-report.json || true
          bandit -r src/ -f txt
        continue-on-error: true
      
      - name: Run Safety vulnerability scan
        run: |
          safety check --json --output safety-report.json || true
          safety check
        continue-on-error: true
      
      - name: Run Semgrep security scan
        run: |
          semgrep --config=auto src/ --json --output=semgrep-report.json || true
          semgrep --config=auto src/
        continue-on-error: true
      
      - name: Run Checkov infrastructure scan
        run: |
          checkov -d . --framework dockerfile,github_actions --output json --output-file checkov-report.json || true
          checkov -d . --framework dockerfile,github_actions
        continue-on-error: true
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: python
          queries: security-and-quality
      
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
      
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
            semgrep-report.json
            checkov-report.json
          retention-days: 30

  # ============================================================================
  # CODE QUALITY AND LINTING
  # ============================================================================
  code-quality:
    name: üßπ Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-quality-${{ hashFiles('**/pyproject.toml') }}
      
      - name: Install dependencies
        run: |
          pip install -e ".[dev]"
      
      - name: Cache pre-commit
        uses: actions/cache@v3
        with:
          path: ~/.cache/pre-commit
          key: ${{ runner.os }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
      
      - name: Run pre-commit hooks
        run: |
          pre-commit install
          pre-commit run --all-files --show-diff-on-failure
      
      - name: Run ruff linting
        run: |
          ruff check src/ tests/ --output-format=github
      
      - name: Run black formatting check
        run: |
          black --check --diff src/ tests/
      
      - name: Run isort import sorting check
        run: |
          isort --check-only --diff src/ tests/
      
      - name: Run mypy type checking
        run: |
          mypy src/testgen_copilot --config-file pyproject.toml

  # ============================================================================
  # COMPREHENSIVE TESTING MATRIX
  # ============================================================================
  test:
    name: üß™ Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        include:
          # Coverage testing on main platform
          - os: ubuntu-latest
            python-version: "3.11"
            coverage: true
          # Performance testing
          - os: ubuntu-latest
            python-version: "3.11"
            performance: true
        exclude:
          # Exclude some combinations to reduce CI time
          - os: macos-latest
            python-version: "3.8"
          - os: windows-latest
            python-version: "3.8"
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.cache/pytest
          key: ${{ runner.os }}-py${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
      
      - name: Install dependencies
        run: |
          pip install -e ".[dev,ai,security]"
      
      - name: Run unit tests
        if: ${{ !inputs.skip_tests }}
        run: |
          pytest tests/ -v --tb=short -m "not slow" \
            --junitxml=test-results-${{ matrix.os }}-${{ matrix.python-version }}.xml
      
      - name: Run integration tests
        if: ${{ !inputs.skip_tests && matrix.os == 'ubuntu-latest' }}
        run: |
          pytest tests/integration/ -v --tb=short \
            --junitxml=integration-results-${{ matrix.os }}-${{ matrix.python-version }}.xml
      
      - name: Run performance tests
        if: ${{ matrix.performance && !inputs.skip_tests }}
        run: |
          pytest tests/performance/ -v --benchmark-only \
            --benchmark-json=benchmark-${{ matrix.os }}-${{ matrix.python-version }}.json
      
      - name: Generate coverage report
        if: ${{ matrix.coverage && !inputs.skip_tests }}
        run: |
          pytest tests/ --cov=src/testgen_copilot \
            --cov-report=xml --cov-report=html --cov-report=term-missing \
            --cov-fail-under=80
      
      - name: Upload coverage to Codecov
        if: ${{ matrix.coverage && !inputs.skip_tests }}
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-${{ matrix.os }}-${{ matrix.python-version }}
          fail_ci_if_error: true
      
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
          path: |
            test-results-*.xml
            integration-results-*.xml
            benchmark-*.json
            htmlcov/
          retention-days: 30

  # ============================================================================
  # BUILD AND PACKAGING
  # ============================================================================
  build:
    name: üì¶ Build & Package
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install build tools
        run: |
          pip install build twine wheel
      
      - name: Build package
        run: |
          python -m build
      
      - name: Verify package
        run: |
          twine check dist/*
      
      - name: Generate SBOM
        run: |
          pip install cyclonedx-bom
          cyclonedx-py -o sbom.json
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            dist/
            sbom.json
          retention-days: 30

  # ============================================================================
  # CONTAINER BUILD AND SECURITY SCAN
  # ============================================================================
  container:
    name: üê≥ Container Build & Scan
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: terragonlabs/testgen-copilot
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            VCS_REF=${{ github.sha }}
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: terragonlabs/testgen-copilot:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # ============================================================================
  # DOCUMENTATION BUILD AND DEPLOY
  # ============================================================================
  docs:
    name: üìö Documentation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install documentation dependencies
        run: |
          pip install -e ".[dev]"
          pip install sphinx sphinx-rtd-theme myst-parser
      
      - name: Build documentation
        run: |
          cd docs
          sphinx-build -b html . _build/html -W
      
      - name: Check links
        run: |
          cd docs
          sphinx-build -b linkcheck . _build/linkcheck
        continue-on-error: true
      
      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: docs/_build/html

  # ============================================================================
  # DEPLOYMENT TO STAGING
  # ============================================================================
  deploy-staging:
    name: üöÄ Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, container]
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging.testgen-copilot.terragonlabs.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add actual deployment commands here
      
      - name: Run smoke tests
        run: |
          echo "Running staging smoke tests..."
          # Add smoke test commands here
      
      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: success
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: "üöÄ Successfully deployed to staging environment"

  # ============================================================================
  # RELEASE AND PRODUCTION DEPLOYMENT
  # ============================================================================
  release:
    name: üéâ Release & Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, container, docs]
    if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && inputs.environment == 'production')
    environment:
      name: production
      url: https://testgen-copilot.terragonlabs.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: dist/
      
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          pip install twine
          twine upload dist/*
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/*
            sbom.json
          generate_release_notes: true
          draft: false
          prerelease: false
      
      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add actual deployment commands here
      
      - name: Run production health checks
        run: |
          echo "Running production health checks..."
          # Add health check commands here
      
      - name: Notify successful release
        uses: 8398a7/action-slack@v3
        with:
          status: success
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: "üéâ Successfully released and deployed to production!"

  # ============================================================================
  # CLEANUP AND NOTIFICATIONS
  # ============================================================================
  cleanup:
    name: üßπ Cleanup & Notify
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality, test, build, container, docs]
    if: always()
    
    steps:
      - name: Clean up artifacts
        run: |
          echo "Cleaning up temporary artifacts..."
      
      - name: Generate summary report
        run: |
          cat > summary.md << EOF
          # CI/CD Pipeline Summary
          
          ## Security Scan: ${{ needs.security-scan.result }}
          ## Code Quality: ${{ needs.code-quality.result }}
          ## Tests: ${{ needs.test.result }}
          ## Build: ${{ needs.build.result }}
          ## Container: ${{ needs.container.result }}
          ## Documentation: ${{ needs.docs.result }}
          
          Pipeline completed at: $(date)
          EOF
      
      - name: Notify on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: "‚ùå CI/CD Pipeline failed! Please check the workflow run for details."