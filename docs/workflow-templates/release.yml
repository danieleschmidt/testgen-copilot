# Automated Release Management
# Creates releases, generates changelogs, and publishes packages

name: Release

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Type of release'
        required: true
        default: 'auto'
        type: choice
        options:
          - auto
          - patch
          - minor
          - major

permissions:
  contents: write
  packages: write
  pull-requests: write
  issues: write

jobs:
  # ==========================================================================
  # Determine Release Version
  # ==========================================================================
  version:
    name: Determine Version
    runs-on: ubuntu-latest
    outputs:
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
      new_release_version: ${{ steps.semantic.outputs.new_release_version }}
      new_release_major_version: ${{ steps.semantic.outputs.new_release_major_version }}
      new_release_minor_version: ${{ steps.semantic.outputs.new_release_minor_version }}
      new_release_patch_version: ${{ steps.semantic.outputs.new_release_patch_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install semantic-release
        run: |
          npm install -g semantic-release \
            @semantic-release/changelog \
            @semantic-release/git \
            @semantic-release/github \
            @semantic-release/exec \
            conventional-changelog-conventionalcommits

      - name: Run semantic-release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          semantic-release --dry-run
          echo "new_release_published=$(semantic-release --dry-run | grep -q 'Published release' && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT

  # ==========================================================================
  # Build and Test
  # ==========================================================================
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: version
    if: needs.version.outputs.new_release_published == 'true' || github.event.inputs.release_type != ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run full test suite
        run: |
          pytest --cov=src/testgen_copilot \
                 --cov-report=xml \
                 --cov-report=term-missing \
                 --cov-fail-under=85

      - name: Run security scan
        run: |
          bandit -r src/
          safety check

      - name: Build package
        run: |
          python -m build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-packages
          path: dist/

  # ==========================================================================
  # Create Release
  # ==========================================================================
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [version, build]
    if: needs.version.outputs.new_release_published == 'true' || github.event.inputs.release_type != ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install semantic-release
        run: |
          npm install -g semantic-release \
            @semantic-release/changelog \
            @semantic-release/git \
            @semantic-release/github \
            @semantic-release/exec \
            conventional-changelog-conventionalcommits

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: release-packages
          path: dist/

      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: semantic-release

  # ==========================================================================
  # Publish to PyPI
  # ==========================================================================
  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [release]
    environment: pypi
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: release-packages
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}

  # ==========================================================================
  # Build and Push Docker Images
  # ==========================================================================
  docker:
    name: Build and Push Docker
    runs-on: ubuntu-latest
    needs: [release]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            VCS_REF=${{ github.sha }}

  # ==========================================================================
  # Post-Release Actions
  # ==========================================================================
  post-release:
    name: Post-Release Actions
    runs-on: ubuntu-latest
    needs: [release, publish-pypi, docker]
    if: always() && needs.release.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update documentation
        run: |
          # Update version references in documentation
          sed -i "s/version: .*/version: ${{ needs.version.outputs.new_release_version }}/g" docs/**/*.md || true

      - name: Create documentation PR
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            docs: update version references to ${{ needs.version.outputs.new_release_version }}
            
            üöÄ Generated with [Claude Code](https://claude.ai/code)
            
            Co-Authored-By: Claude <noreply@anthropic.com>
          title: 'docs: update version references to ${{ needs.version.outputs.new_release_version }}'
          body: |
            ## Documentation Update
            
            Updates version references in documentation to reflect the new release.
            
            **Release Version**: ${{ needs.version.outputs.new_release_version }}
            
            üöÄ Generated with [Claude Code](https://claude.ai/code)
          branch: docs/version-update-${{ needs.version.outputs.new_release_version }}
          labels: |
            documentation
            automated

      - name: Notify release channels
        run: |
          echo "üöÄ New release published: ${{ needs.version.outputs.new_release_version }}"
          echo "üì¶ PyPI: https://pypi.org/project/testgen-copilot/${{ needs.version.outputs.new_release_version }}/"
          echo "üê≥ Docker: ghcr.io/${{ github.repository }}:${{ needs.version.outputs.new_release_version }}"
          echo "üìã Release Notes: ${{ github.server_url }}/${{ github.repository }}/releases/tag/v${{ needs.version.outputs.new_release_version }}"