```yaml
# Pre-commit configuration for TestGen Copilot Assistant
# See https://pre-commit.com for more information

repos:
  # General file checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
        args: [--markdown-linebreak-ext=md]
      - id: end-of-file-fixer
      - id: check-yaml
        args: [--unsafe]
      - id: check-json
      - id: check-toml
      - id: check-xml
      - id: check-merge-conflict
      - id: check-case-conflict
      - id: check-symlinks
      - id: check-added-large-files
        args: ['--maxkb=1000']
      - id: check-docstring-first
      - id: debug-statements
      - id: name-tests-test
        args: ['--pytest-test-first']
      - id: requirements-txt-fixer
      - id: fix-byte-order-marker
      - id: mixed-line-ending
        args: ['--fix=lf']

  # Python code formatting
  - repo: https://github.com/psf/black
    rev: 23.12.1
    hooks:
      - id: black
        language_version: python3
        args: [--line-length=88]

  # Python import sorting
  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        args: ["--profile", "black", "--line-length=88", "--filter-files"]

  # Python linting with Ruff
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.1.9
    hooks:
      - id: ruff
        args: [--fix, --exit-non-zero-on-fix]
      - id: ruff-format

  # Python type checking
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.8.0
    hooks:
      - id: mypy
        additional_dependencies: [types-all, types-requests, types-PyYAML]
        args: [--strict, --ignore-missing-imports, --config-file=pyproject.toml]
        exclude: ^(tests/|docs/)

  # Security scanning
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.6
    hooks:
      - id: bandit
        args: ['-c', 'pyproject.toml']
        additional_dependencies: ['bandit[toml]']
        exclude: ^tests/

  # Dependency vulnerability scanning
  - repo: https://github.com/pyupio/safety
    rev: 2.4.0b2
    hooks:
      - id: safety
        args: [--json]

  # Documentation
  - repo: https://github.com/pycqa/pydocstyle
    rev: 6.3.0
    hooks:
      - id: pydocstyle
        args: [--convention=google]
        exclude: ^tests/

  # YAML formatting
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v4.0.0-alpha.8
    hooks:
      - id: prettier
        types_or: [yaml, json, markdown]
        exclude: ^(CHANGELOG.md|docs/status/|.github/workflows/|\.pre-commit-config\.yaml)$

  # Markdown formatting
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.38.0
    hooks:
      - id: markdownlint
        args: [--fix]
        exclude: ^(CHANGELOG\.md|docs/)

  # Shell script linting
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.6
    hooks:
      - id: shellcheck

  # Dockerfile linting
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        args: [--ignore, DL3008, --ignore, DL3009]

  # Git commit message formatting
  - repo: https://github.com/commitizen-tools/commitizen
    rev: v3.13.0
    hooks:
      - id: commitizen
        stages: [commit-msg]

  # Check for secrets
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        args: [--baseline, .secrets.baseline]
        exclude: package.lock.json

  # License header checking
  - repo: https://github.com/Lucas-C/pre-commit-hooks
    rev: v1.5.4
    hooks:
      - id: insert-license
        files: \.py$
        args:
          - --license-filepath
          - .license-header.txt
          - --comment-style
          - "#"

  # Local hooks for project-specific checks
  - repo: local
    hooks:
      # Run tests before commit
      - id: pytest-check
        name: pytest-check
        entry: pytest
        language: system
        args: [--tb=short, -q, --no-cov]
        pass_filenames: false
        stages: [commit]

      # Check test coverage
      - id: coverage-check
        name: coverage-check
        entry: coverage
        language: system
        args: [report, --fail-under=80]
        pass_filenames: false
        stages: [push]

      # Check for TODO/FIXME comments in production code
      - id: check-todos
        name: check-todos
        entry: python
        language: system
        args: [-c, "import sys, re; sys.exit(1 if any(re.search(r'(TODO|FIXME|XXX)(?!.*test)', line) for f in sys.argv[1:] for line in open(f, errors='ignore')) else 0)"]
        files: ^src/.*\.py$
        stages: [commit]

      # Validate configuration files
      - id: validate-config
        name: validate-testgen-config
        entry: python
        language: system
        args: [-c, "import json; [json.load(open(f)) for f in sys.argv[1:]]"]
        files: \.testgen\.config\.json$

      # Check for large files
      - id: check-large-files
        name: check-large-files
        entry: python
        language: system
        args: [-c, "import sys, os; sys.exit(1 if any(os.path.getsize(f) > 1024*1024 for f in sys.argv[1:] if os.path.exists(f)) else 0)"]
        pass_filenames: true

# Configuration
default_language_version:
  python: python3

ci:
  autofix_commit_msg: |
    ðŸ¤– [pre-commit.ci] auto fixes from pre-commit hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: 'main'
  autoupdate_commit_msg: 'ðŸ¤– [pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: [pytest-check, coverage-check]
  submodules: false
```
