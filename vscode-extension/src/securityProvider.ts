import * as vscode from 'vscode';
import * as cp from 'child_process';

export class SecurityProvider {
    async runScan(projectPath: string, pythonPath: string, scanLevel: string): Promise<void> {
        return vscode.window.withProgress({
            location: vscode.ProgressLocation.Notification,
            title: 'Running security scan...',
            cancellable: true
        }, async (progress, token) => {
            return new Promise<void>((resolve, reject) => {
                const args = [
                    '-m', 'testgen_copilot',
                    'analyze',
                    '--project', projectPath,
                    '--security-scan',
                    '--scan-level', scanLevel
                ];

                const child = cp.spawn(pythonPath, args);
                let output = '';
                let errorOutput = '';

                child.stdout?.on('data', (data) => {
                    output += data.toString();
                });

                child.stderr?.on('data', (data) => {
                    errorOutput += data.toString();
                });

                child.on('close', (code) => {
                    if (code === 0) {
                        this.showSecurityResults(output);
                        resolve();
                    } else {
                        vscode.window.showErrorMessage(`Security scan failed: ${errorOutput}`);
                        reject(new Error(`Process exited with code ${code}`));
                    }
                });

                token.onCancellationRequested(() => {
                    child.kill();
                    reject(new Error('Operation cancelled'));
                });
            });
        });
    }

    private async showSecurityResults(output: string): Promise<void> {
        const document = await vscode.workspace.openTextDocument({
            content: this.formatSecurityOutput(output),
            language: 'plaintext'
        });

        await vscode.window.showTextDocument(document, {
            viewColumn: vscode.ViewColumn.Beside,
            preview: false
        });

        // Parse results and show diagnostics
        this.parseAndShowDiagnostics(output);
    }

    private formatSecurityOutput(output: string): string {
        const lines = output.split('\n');
        let formatted = '# Security Scan Results\n\n';
        
        let currentSection = '';
        for (const line of lines) {
            if (line.startsWith('=== ')) {
                currentSection = line.replace(/=/g, '').trim();
                formatted += `## ${currentSection}\n\n`;
            } else if (line.startsWith('CRITICAL:') || line.startsWith('HIGH:')) {
                formatted += `üî¥ **${line}**\n\n`;
            } else if (line.startsWith('MEDIUM:')) {
                formatted += `üü° **${line}**\n\n`;
            } else if (line.startsWith('LOW:')) {
                formatted += `üü¢ **${line}**\n\n`;
            } else if (line.startsWith('INFO:')) {
                formatted += `‚ÑπÔ∏è ${line}\n\n`;
            } else if (line.trim() && !line.startsWith('---')) {
                formatted += `${line}\n\n`;
            }
        }
        
        formatted += '\n---\n\n';
        formatted += `Scan completed at: ${new Date().toLocaleString()}\n`;
        formatted += 'Generated by TestGen Copilot Security Scanner\n';
        
        return formatted;
    }

    private parseAndShowDiagnostics(output: string): void {
        const diagnosticCollection = vscode.languages.createDiagnosticCollection('testgen-security');
        const diagnosticMap = new Map<string, vscode.Diagnostic[]>();

        const lines = output.split('\n');
        let currentFile = '';
        
        for (const line of lines) {
            // Parse file paths and line numbers from security scan output
            const fileMatch = line.match(/^(.+\.py):(\d+):(\d+):\s*(CRITICAL|HIGH|MEDIUM|LOW):\s*(.+)$/);
            if (fileMatch) {
                const [, filePath, lineNum, , severity, message] = fileMatch;
                currentFile = filePath;
                
                const uri = vscode.Uri.file(filePath);
                const lineNumber = parseInt(lineNum) - 1;
                const range = new vscode.Range(lineNumber, 0, lineNumber, 100);
                
                const diagnosticSeverity = this.getSeverityLevel(severity);
                const diagnostic = new vscode.Diagnostic(range, message, diagnosticSeverity);
                diagnostic.source = 'TestGen Security';
                diagnostic.code = severity.toLowerCase();
                
                if (!diagnosticMap.has(filePath)) {
                    diagnosticMap.set(filePath, []);
                }
                diagnosticMap.get(filePath)!.push(diagnostic);
            }
        }

        // Apply diagnostics to files
        for (const [filePath, diagnostics] of diagnosticMap) {
            const uri = vscode.Uri.file(filePath);
            diagnosticCollection.set(uri, diagnostics);
        }
    }

    private getSeverityLevel(severity: string): vscode.DiagnosticSeverity {
        switch (severity.toUpperCase()) {
            case 'CRITICAL':
            case 'HIGH':
                return vscode.DiagnosticSeverity.Error;
            case 'MEDIUM':
                return vscode.DiagnosticSeverity.Warning;
            case 'LOW':
                return vscode.DiagnosticSeverity.Information;
            default:
                return vscode.DiagnosticSeverity.Hint;
        }
    }
}