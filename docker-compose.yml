# Docker Compose for TestGen Copilot Assistant
# Provides development environment with all necessary services

version: '3.8'

services:
  # =============================================================================
  # Main Application Service
  # =============================================================================
  testgen:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
      args:
        BUILD_DATE: ${BUILD_DATE:-}
        VERSION: ${VERSION:-0.0.1}
        VCS_REF: ${VCS_REF:-}
    container_name: testgen-copilot
    volumes:
      - .:/app
      - testgen-cache:/home/testgen/.testgen
      - /var/run/docker.sock:/var/run/docker.sock  # For Docker-in-Docker
    environment:
      - TESTGEN_ENV=development
      - TESTGEN_LOG_LEVEL=DEBUG
      - TESTGEN_DATA_DIR=/home/testgen/.testgen
      # LLM API keys (set in .env file)
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      # Local LLM support
      - LOCAL_LLM_ENABLED=${LOCAL_LLM_ENABLED:-false}
      - LOCAL_LLM_HOST=ollama
      - LOCAL_LLM_PORT=11434
    ports:
      - "8000:8000"  # API server (future)
      - "8888:8888"  # Jupyter (development)
    networks:
      - testgen-network
    depends_on:
      - redis
      - ollama
    restart: unless-stopped
    stdin_open: true
    tty: true

  # =============================================================================
  # Redis for Caching and Session Management
  # =============================================================================
  redis:
    image: redis:7-alpine
    container_name: testgen-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-testgen123}
    networks:
      - testgen-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # Local LLM Service (Ollama)
  # =============================================================================
  ollama:
    image: ollama/ollama:latest
    container_name: testgen-ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama-data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
    networks:
      - testgen-network
    restart: unless-stopped
    pull_policy: always
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]

  # =============================================================================
  # Monitoring and Observability
  # =============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: testgen-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - testgen-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: testgen-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - testgen-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # =============================================================================
  # Database for Metrics and Analytics (Optional)
  # =============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: testgen-postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-testgen}
      - POSTGRES_USER=${POSTGRES_USER:-testgen}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-testgen123}
    networks:
      - testgen-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-testgen}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # Testing Services
  # =============================================================================
  test-runner:
    build:
      context: .
      dockerfile: Dockerfile
      target: testing
    container_name: testgen-tests
    volumes:
      - .:/app
      - testgen-cache:/home/testgen/.testgen
    environment:
      - TESTGEN_ENV=test
      - TESTGEN_LOG_LEVEL=DEBUG
    networks:
      - testgen-network
    profiles:
      - testing

  # =============================================================================
  # CI/CD Services
  # =============================================================================
  ci-runner:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: testgen-ci
    volumes:
      - .:/app
    environment:
      - CI=true
      - TESTGEN_ENV=ci
    command: |
      sh -c "
        make ci-install &&
        make ci-quality &&
        make ci-test &&
        make ci-security
      "
    networks:
      - testgen-network
    profiles:
      - ci

# =============================================================================
# Networks
# =============================================================================
networks:
  testgen-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =============================================================================
# Volumes
# =============================================================================
volumes:
  testgen-cache:
    driver: local
  redis-data:
    driver: local
  ollama-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  postgres-data:
    driver: local