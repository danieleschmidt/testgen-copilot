# Multi-stage build for autonomous SDLC production deployment
FROM python:3.11-slim as base

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONPATH=/app/src \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Create non-root user for security
RUN groupadd -r autonomous && useradd -r -g autonomous autonomous

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    git \
    build-essential \
    postgresql-client \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy requirements and install Python dependencies
COPY requirements.txt requirements-dev.txt ./
COPY pyproject.toml setup.py ./

# Install Python dependencies
RUN pip install --upgrade pip setuptools wheel && \
    pip install -r requirements.txt && \
    pip install -r requirements-dev.txt && \
    pip install -e .

# Development stage
FROM base as development

# Install additional development tools
RUN pip install pytest pytest-asyncio pytest-cov black ruff mypy

# Copy source code
COPY . .

# Set ownership to autonomous user
RUN chown -R autonomous:autonomous /app

USER autonomous

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD python -c "import requests; requests.get('http://localhost:8000/health')"

# Default command for development
CMD ["python", "-m", "uvicorn", "src.testgen_copilot.api.server:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

# Production stage
FROM base as production

# Copy only necessary files for production
COPY src/ ./src/
COPY scripts/ ./scripts/
COPY monitoring/ ./monitoring/

# Create necessary directories with proper permissions
RUN mkdir -p /app/research_output /app/evolution_log /app/ml_models /app/monitoring_data && \
    chown -R autonomous:autonomous /app

# Set ownership to autonomous user
RUN chown -R autonomous:autonomous /app

# Switch to non-root user
USER autonomous

# Health check for production
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Production command
CMD ["python", "-m", "uvicorn", "src.testgen_copilot.api.server:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "4"]

# Research Engine specific stage
FROM python:3.11-slim as research-engine

ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONPATH=/app/src

RUN groupadd -r research && useradd -r -g research research

WORKDIR /app

# Install research-specific dependencies
RUN apt-get update && apt-get install -y \
    curl \
    git \
    build-essential \
    postgresql-client \
    pandoc \
    texlive-latex-base \
    && rm -rf /var/lib/apt/lists/*

COPY requirements.txt ./
RUN pip install --upgrade pip && \
    pip install -r requirements.txt && \
    pip install scipy numpy pandas matplotlib seaborn jupyter

COPY src/testgen_copilot/autonomous_research_engine.py ./src/testgen_copilot/
COPY src/testgen_copilot/__init__.py ./src/testgen_copilot/
COPY scripts/research_runner.py ./

RUN mkdir -p /app/research_output /app/academic_papers && \
    chown -R research:research /app

USER research

CMD ["python", "research_runner.py"]

# Evolution Engine specific stage  
FROM python:3.11-slim as evolution-engine

ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONPATH=/app/src

RUN groupadd -r evolution && useradd -r -g evolution evolution

WORKDIR /app

RUN apt-get update && apt-get install -y \
    curl \
    git \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

COPY requirements.txt ./
RUN pip install --upgrade pip && \
    pip install -r requirements.txt && \
    pip install ast-tools black ruff

COPY src/testgen_copilot/self_evolving_architecture.py ./src/testgen_copilot/
COPY src/testgen_copilot/__init__.py ./src/testgen_copilot/
COPY scripts/evolution_runner.py ./

RUN mkdir -p /app/evolution_log /app/backups && \
    chown -R evolution:evolution /app

USER evolution

# Security: Evolution engine runs with restricted permissions
SECURITY_OPT no-new-privileges:true

CMD ["python", "evolution_runner.py"]

# Neural Predictor specific stage
FROM python:3.11-slim as neural-predictor

ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONPATH=/app/src

RUN groupadd -r neural && useradd -r -g neural neural

WORKDIR /app

RUN apt-get update && apt-get install -y \
    curl \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

COPY requirements.txt ./
RUN pip install --upgrade pip && \
    pip install -r requirements.txt && \
    pip install scikit-learn tensorflow torch numpy pandas

COPY src/testgen_copilot/neural_test_predictor.py ./src/testgen_copilot/
COPY src/testgen_copilot/__init__.py ./src/testgen_copilot/
COPY scripts/neural_predictor_runner.py ./

RUN mkdir -p /app/ml_models /app/training_data && \
    chown -R neural:neural /app

USER neural

CMD ["python", "neural_predictor_runner.py"]

# Quantum Optimizer specific stage
FROM python:3.11-slim as quantum-optimizer

ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONPATH=/app/src

RUN groupadd -r quantum && useradd -r -g quantum quantum

WORKDIR /app

RUN apt-get update && apt-get install -y \
    curl \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

COPY requirements.txt ./
RUN pip install --upgrade pip && \
    pip install -r requirements.txt && \
    pip install scipy numpy multiprocessing-logging

COPY src/testgen_copilot/quantum_scale_optimizer.py ./src/testgen_copilot/
COPY src/testgen_copilot/__init__.py ./src/testgen_copilot/
COPY scripts/quantum_optimizer_runner.py ./

RUN mkdir -p /app/quantum_state && \
    chown -R quantum:quantum /app

USER quantum

CMD ["python", "quantum_optimizer_runner.py"]

# Monitoring Hub specific stage
FROM python:3.11-slim as monitoring-hub

ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONPATH=/app/src

RUN groupadd -r monitoring && useradd -r -g monitoring monitoring

WORKDIR /app

RUN apt-get update && apt-get install -y \
    curl \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

COPY requirements.txt ./
RUN pip install --upgrade pip && \
    pip install -r requirements.txt && \
    pip install prometheus-client psutil

COPY src/testgen_copilot/comprehensive_monitoring.py ./src/testgen_copilot/
COPY src/testgen_copilot/advanced_resilience_system.py ./src/testgen_copilot/
COPY src/testgen_copilot/__init__.py ./src/testgen_copilot/
COPY scripts/monitoring_runner.py ./

RUN mkdir -p /app/monitoring_data && \
    chown -R monitoring:monitoring /app

USER monitoring

EXPOSE 9090 3000

CMD ["python", "monitoring_runner.py"]

# Security Scanner specific stage
FROM python:3.11-slim as security-scanner

ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONPATH=/app/src

RUN groupadd -r security && useradd -r -g security security

WORKDIR /app

RUN apt-get update && apt-get install -y \
    curl \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

COPY requirements.txt ./
RUN pip install --upgrade pip && \
    pip install -r requirements.txt && \
    pip install bandit safety semgrep

COPY scripts/security_scanner_runner.py ./

RUN mkdir -p /app/security_reports && \
    chown -R security:security /app

USER security

CMD ["python", "security_scanner_runner.py"]