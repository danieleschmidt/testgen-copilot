version: '3.8'

services:
  # Autonomous SDLC Master Services
  autonomous-api:
    build:
      context: .
      dockerfile: Dockerfile.autonomous
      args:
        BUILD_ENV: production
    container_name: autonomous-api
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PYTHONPATH=/app/src
      - AUTONOMOUS_MODE=enabled
      - QUANTUM_COHERENCE=0.9
      - ML_PROCESSING=enabled
      - RESEARCH_ENGINE=enabled
      - EVOLUTION_ENGINE=enabled
      - RESILIENCE_LEVEL=maximum
      - MONITORING_LEVEL=comprehensive
    ports:
      - "8000:8000"
    volumes:
      - ./research_output:/app/research_output
      - ./evolution_log:/app/evolution_log
      - ./ml_models:/app/ml_models
      - ./monitoring_data:/app/monitoring_data
    depends_on:
      - postgres
      - redis
      - prometheus
    networks:
      - autonomous-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Research Engine Service
  research-engine:
    build:
      context: .
      dockerfile: Dockerfile.research-engine
    container_name: research-engine
    restart: unless-stopped
    environment:
      - RESEARCH_MODE=autonomous
      - LITERATURE_DB_URL=postgresql://postgres:postgres@postgres:5432/research_db
      - HYPOTHESIS_TRACKING=enabled
      - EXPERIMENTAL_VALIDATION=enabled
    volumes:
      - ./research_output:/app/research_output
      - ./academic_papers:/app/academic_papers:ro
    depends_on:
      - postgres
    networks:
      - autonomous-network

  # Self-Evolution Service
  evolution-engine:
    build:
      context: .
      dockerfile: Dockerfile.evolution-engine
    container_name: evolution-engine
    restart: unless-stopped
    environment:
      - EVOLUTION_MODE=autonomous
      - SAFETY_LEVEL=maximum
      - CODE_ANALYSIS=enabled
      - MUTATION_VALIDATION=strict
      - BACKUP_RETENTION=7
    volumes:
      - ./src:/app/codebase
      - ./evolution_log:/app/evolution_log
      - ./backups:/app/backups
    depends_on:
      - postgres
    networks:
      - autonomous-network
    security_opt:
      - no-new-privileges:true

  # Neural Predictor Service
  neural-predictor:
    build:
      context: .
      dockerfile: Dockerfile.neural-predictor
    container_name: neural-predictor
    restart: unless-stopped
    environment:
      - ML_MODE=production
      - MODEL_TRAINING=online
      - PREDICTION_CACHE=enabled
      - GPU_ACCELERATION=auto-detect
    volumes:
      - ./ml_models:/app/ml_models
      - ./training_data:/app/training_data
    depends_on:
      - postgres
      - redis
    networks:
      - autonomous-network
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G

  # Quantum Scale Optimizer
  quantum-optimizer:
    build:
      context: .
      dockerfile: Dockerfile.quantum-optimizer
    container_name: quantum-optimizer
    restart: unless-stopped
    environment:
      - QUANTUM_MODE=production
      - PROCESSING_NODES=auto-detect
      - OPTIMIZATION_LEVEL=maximum
      - DISTRIBUTED_PROCESSING=enabled
    volumes:
      - ./quantum_state:/app/quantum_state
    depends_on:
      - postgres
      - redis
    networks:
      - autonomous-network
    deploy:
      resources:
        limits:
          cpus: '0.0'  # No limit
          memory: 8G

  # Advanced Monitoring & Resilience
  monitoring-hub:
    build:
      context: .
      dockerfile: Dockerfile.monitoring-hub
    container_name: monitoring-hub
    restart: unless-stopped
    environment:
      - MONITORING_MODE=comprehensive
      - ALERT_LEVEL=production
      - METRICS_RETENTION=30d
      - RESILIENCE_MODE=maximum
    ports:
      - "9090:9090"  # Prometheus
      - "3000:3000"  # Grafana
    volumes:
      - ./monitoring_data:/app/monitoring_data
      - prometheus-data:/prometheus
      - grafana-data:/var/lib/grafana
    depends_on:
      - postgres
    networks:
      - autonomous-network

  # Database Services
  postgres:
    image: postgres:15-alpine
    container_name: autonomous-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: autonomous_sdlc
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_autonomous_password}
      POSTGRES_MULTIPLE_DATABASES: research_db,evolution_db,ml_db,quantum_db
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh:ro
    ports:
      - "5432:5432"
    networks:
      - autonomous-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: autonomous-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-secure_redis_password}
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - autonomous-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Observability Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: autonomous-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/autonomous-alert-rules.yml:/etc/prometheus/alert_rules.yml
      - prometheus-data:/prometheus
    ports:
      - "9091:9090"
    networks:
      - autonomous-network
    depends_on:
      - autonomous-api

  grafana:
    image: grafana/grafana:latest
    container_name: autonomous-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-autonomous_admin}
      GF_INSTALL_PLUGINS: grafana-piechart-panel
      GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH: /etc/grafana/provisioning/dashboards/autonomous-overview.json
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3001:3000"
    networks:
      - autonomous-network
    depends_on:
      - prometheus

  # Load Balancer & Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: autonomous-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/autonomous-production.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - autonomous-api
      - monitoring-hub
    networks:
      - autonomous-network

  # Message Queue for Async Processing
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: autonomous-rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: autonomous
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-secure_rabbit_password}
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"  # Management UI
    networks:
      - autonomous-network

  # Security Scanning Service
  security-scanner:
    build:
      context: .
      dockerfile: Dockerfile.security-scanner
    container_name: security-scanner
    restart: unless-stopped
    environment:
      - SECURITY_MODE=autonomous
      - SCAN_FREQUENCY=continuous
      - VULNERABILITY_DB_UPDATE=daily
    volumes:
      - ./src:/app/scan_target:ro
      - ./security_reports:/app/security_reports
    networks:
      - autonomous-network

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  rabbitmq-data:
    driver: local

networks:
  autonomous-network:
    driver: bridge
    name: autonomous-sdlc-network